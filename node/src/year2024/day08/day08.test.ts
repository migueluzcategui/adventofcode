import { describe, expect, test } from "bun:test";

import { day08Challenge } from ".";

describe("2024 - Day 8", () => {
  const rawData = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;

  const mapField = [
    [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "0", ".", ".", "."],
    [".", ".", ".", ".", ".", "0", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", "0", ".", ".", ".", "."],
    [".", ".", ".", ".", "0", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", "A", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "A", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", "A", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
  ];

  const antennas = new Map<string, { x: number; y: number }[]>([
    [
      "0",
      [
        { x: 8, y: 1 },
        { x: 5, y: 2 },
        { x: 7, y: 3 },
        { x: 4, y: 4 },
      ],
    ],
    [
      "A",
      [
        { x: 6, y: 5 },
        { x: 8, y: 8 },
        { x: 9, y: 9 },
      ],
    ],
  ]);

  const parsedData = {
    mapField,
    antennas,
  };
  describe("parse", () => {
    test("should parse the map and the antennas", () => {
      expect(day08Challenge.parse(rawData)).toStrictEqual(parsedData);
    });
  });

  describe("part 1", () => {
    test("check how many unique locations exists", () => {
      expect(day08Challenge.part1(parsedData)).toEqual(14);
    });
  });
  describe("part 2", () => {
    test("check how many unique locations in simple map", () => {
      const parsedData = {
        mapField: [
          ["T", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", "T", ".", ".", ".", ".", ".", "."],
          [".", "T", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
          [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
        ],
        antennas: new Map<string, { x: number; y: number }[]>([
          [
            "T",
            [
              { x: 0, y: 0 },
              { x: 3, y: 1 },
              { x: 1, y: 2 },
            ],
          ],
        ]),
      };
      expect(day08Challenge.part2(parsedData)).toEqual(9);
    });
    test("check how many unique locations exists", () => {
      expect(day08Challenge.part2(parsedData)).toEqual(34);
    });
  });
});
